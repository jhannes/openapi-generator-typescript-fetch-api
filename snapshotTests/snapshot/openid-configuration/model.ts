/**
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface DiscoveryDocumentDto {
    issuer?: string;
    authorization_endpoint?: string;
    token_endpoint?: string;
    end_session_endpoint?: string;
    jwks_uri?: string;
    response_types_supported?: Array<DiscoveryDocumentDtoResponseTypesSupportedEnum>;
    response_modes_supported?: Array<DiscoveryDocumentDtoResponseModesSupportedEnum>;
    subject_types_supported?: Array<DiscoveryDocumentDtoSubjectTypesSupportedEnum>;
    code_challenge_methods_supported?: Array<DiscoveryDocumentDtoCodeChallengeMethodsSupportedEnum>;
    id_token_signing_alg_values_supported?: Array<DiscoveryDocumentDtoIdTokenSigningAlgValuesSupportedEnum>;
    x_sso_frame?: string;
}

export const DiscoveryDocumentDtoResponseTypesSupportedEnumValues = [
    "code",
    "token",
    "id_token",
] as const;

export type DiscoveryDocumentDtoResponseTypesSupportedEnum = typeof DiscoveryDocumentDtoResponseTypesSupportedEnumValues[number];

export const DiscoveryDocumentDtoResponseModesSupportedEnumValues = [
    "query",
    "fragment",
] as const;

export type DiscoveryDocumentDtoResponseModesSupportedEnum = typeof DiscoveryDocumentDtoResponseModesSupportedEnumValues[number];

export const DiscoveryDocumentDtoSubjectTypesSupportedEnumValues = [
    "pairwise",
    "public",
] as const;

export type DiscoveryDocumentDtoSubjectTypesSupportedEnum = typeof DiscoveryDocumentDtoSubjectTypesSupportedEnumValues[number];

export const DiscoveryDocumentDtoCodeChallengeMethodsSupportedEnumValues = [
    "S256",
    "plain",
] as const;

export type DiscoveryDocumentDtoCodeChallengeMethodsSupportedEnum = typeof DiscoveryDocumentDtoCodeChallengeMethodsSupportedEnumValues[number];

export const DiscoveryDocumentDtoIdTokenSigningAlgValuesSupportedEnumValues = [
    "RS256",
] as const;

export type DiscoveryDocumentDtoIdTokenSigningAlgValuesSupportedEnum = typeof DiscoveryDocumentDtoIdTokenSigningAlgValuesSupportedEnumValues[number];

export interface JwksDocumentDto {
    keys?: Array<JwksKeyDto>;
}

export interface JwksKeyDto {
    kty?: string;
    use?: string;
    kid: string;
    x5c: string;
}

export interface JwtHeaderDto {
    /**
     * Type of JWT
     */
    typ?: string;
    /**
     * Key ID - used to look up the public key/X.509 certificate in the JWKS
     */
    kid?: string;
    /**
     * Algorithm used to sign the JWT. Normally RS256 (RSA signed SHA-256)
     */
    alg?: string;
}

export interface JwtPayloadDto {
    /**
     * Issuer - the URI for the login provider
     */
    iss: string;
    /**
     * Subject - the unique identifier for the logged in user
     */
    sub: string;
    /**
     * Audience - the client_id that the JWT was issued to
     */
    aud: string;
    /**
     * The name of the logged in user
     */
    name?: string;
    /**
     * The email of the logged in user
     */
    email?: string;
    /**
     * The unique identifier of the organization that the user has selected
     */
    orgId?: string;
    /**
     * The name of the organization that the user has selected
     */
    org?: string;
    /**
     * For JWT from ID-porten, contains national identity number
     */
    pid?: string;
}

/**
 * Token response according to https://www.oauth.com/oauth2-servers/access-tokens/access-token-response/
 */
export interface TokenResponseDto {
    access_token: string;
    /**
     * The type of token this is. Always the string \'bearer\'
     */
    token_type: string;
    /**
     * The duration of time the access token is granted for in seconds
     */
    expires_in?: number;
    /**
     * Space separated list of granted scopes for the access_token
     */
    scope?: string;
    /**
     * JWT which has format base64(JwtHeader) + \'.\' base64(JwtPayload) + \'.\' + base64(signature)
     */
    id_token?: string;
    refresh_token?: string;
}
