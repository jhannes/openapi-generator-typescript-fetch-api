/* eslint @typescript-eslint/no-unused-vars: off */
/**
 * FakeRESTApi.Web V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ActivityDto,
    AuthorDto,
    BookDto,
    CoverPhotoDto,
    UserDto,
} from "./model";

import { BaseAPI, RequestCallOptions, SecurityScheme } from "./base";

export interface ApplicationApis {
    activitiesApi: ActivitiesApiInterface;
    authorsApi: AuthorsApiInterface;
    booksApi: BooksApiInterface;
    coverPhotosApi: CoverPhotosApiInterface;
    usersApi: UsersApiInterface;
}

/**
 * ActivitiesApi - object-oriented interface
 */
export interface ActivitiesApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    apiV1ActivitiesGet(params?: RequestCallOptions): Promise<Array<ActivityDto>>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1ActivitiesIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1ActivitiesIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<ActivityDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1ActivitiesIdPut(params: {
        pathParams: { id: number };
        activityDto?: ActivityDto;
    } & RequestCallOptions): Promise<ActivityDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1ActivitiesPost(params?: {
        activityDto?: ActivityDto;
    } & RequestCallOptions): Promise<ActivityDto>;
}

/**
 * ActivitiesApi - object-oriented interface
 */
export class ActivitiesApi extends BaseAPI implements ActivitiesApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    public async apiV1ActivitiesGet(params: RequestCallOptions = {}): Promise<Array<ActivityDto>> {
        return await this.fetch(
            this.basePath + "/api/v1/Activities", params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1ActivitiesIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Activities/{id}", params.pathParams),
            {
                ...params,
                method: "DELETE",
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1ActivitiesIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<ActivityDto> {
        return await this.fetch(
            this.url("/api/v1/Activities/{id}", params.pathParams), params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1ActivitiesIdPut(params: {
        pathParams: { id: number };
        activityDto?: ActivityDto;
    } & RequestCallOptions): Promise<ActivityDto> {
        return await this.fetch(
            this.url("/api/v1/Activities/{id}", params.pathParams),
            {
                ...params,
                method: "PUT",
                body: JSON.stringify(params.activityDto),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1ActivitiesPost(params?: {
        activityDto?: ActivityDto;
    } & RequestCallOptions): Promise<ActivityDto> {
        return await this.fetch(
            this.basePath + "/api/v1/Activities",
            {
                ...params,
                method: "POST",
                body: params?.activityDto ? JSON.stringify(params.activityDto) : undefined,
                headers: {
                    ...this.removeEmpty(params?.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
}

/**
 * AuthorsApi - object-oriented interface
 */
export interface AuthorsApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1AuthorsAuthorsBooksIdBookGet(params: {
        pathParams: { idBook: number };
    } & RequestCallOptions): Promise<Array<AuthorDto>>;
    /**
     *
     * @throws {HttpError}
     */
    apiV1AuthorsGet(params?: RequestCallOptions): Promise<Array<AuthorDto>>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1AuthorsIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1AuthorsIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<AuthorDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1AuthorsIdPut(params: {
        pathParams: { id: number };
        authorDto?: AuthorDto;
    } & RequestCallOptions): Promise<AuthorDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1AuthorsPost(params?: {
        authorDto?: AuthorDto;
    } & RequestCallOptions): Promise<AuthorDto>;
}

/**
 * AuthorsApi - object-oriented interface
 */
export class AuthorsApi extends BaseAPI implements AuthorsApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1AuthorsAuthorsBooksIdBookGet(params: {
        pathParams: { idBook: number };
    } & RequestCallOptions): Promise<Array<AuthorDto>> {
        return await this.fetch(
            this.url("/api/v1/Authors/authors/books/{idBook}", params.pathParams), params
        );
    }
    /**
     *
     * @throws {HttpError}
     */
    public async apiV1AuthorsGet(params: RequestCallOptions = {}): Promise<Array<AuthorDto>> {
        return await this.fetch(
            this.basePath + "/api/v1/Authors", params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1AuthorsIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Authors/{id}", params.pathParams),
            {
                ...params,
                method: "DELETE",
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1AuthorsIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<AuthorDto> {
        return await this.fetch(
            this.url("/api/v1/Authors/{id}", params.pathParams), params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1AuthorsIdPut(params: {
        pathParams: { id: number };
        authorDto?: AuthorDto;
    } & RequestCallOptions): Promise<AuthorDto> {
        return await this.fetch(
            this.url("/api/v1/Authors/{id}", params.pathParams),
            {
                ...params,
                method: "PUT",
                body: JSON.stringify(params.authorDto),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1AuthorsPost(params?: {
        authorDto?: AuthorDto;
    } & RequestCallOptions): Promise<AuthorDto> {
        return await this.fetch(
            this.basePath + "/api/v1/Authors",
            {
                ...params,
                method: "POST",
                body: params?.authorDto ? JSON.stringify(params.authorDto) : undefined,
                headers: {
                    ...this.removeEmpty(params?.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
}

/**
 * BooksApi - object-oriented interface
 */
export interface BooksApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    apiV1BooksGet(params?: RequestCallOptions): Promise<Array<BookDto>>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1BooksIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1BooksIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<BookDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1BooksIdPut(params: {
        pathParams: { id: number };
        bookDto?: BookDto;
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1BooksPost(params?: {
        bookDto?: BookDto;
    } & RequestCallOptions): Promise<void>;
}

/**
 * BooksApi - object-oriented interface
 */
export class BooksApi extends BaseAPI implements BooksApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    public async apiV1BooksGet(params: RequestCallOptions = {}): Promise<Array<BookDto>> {
        return await this.fetch(
            this.basePath + "/api/v1/Books", params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1BooksIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Books/{id}", params.pathParams),
            {
                ...params,
                method: "DELETE",
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1BooksIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<BookDto> {
        return await this.fetch(
            this.url("/api/v1/Books/{id}", params.pathParams), params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1BooksIdPut(params: {
        pathParams: { id: number };
        bookDto?: BookDto;
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Books/{id}", params.pathParams),
            {
                ...params,
                method: "PUT",
                body: JSON.stringify(params.bookDto),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1BooksPost(params?: {
        bookDto?: BookDto;
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.basePath + "/api/v1/Books",
            {
                ...params,
                method: "POST",
                body: params?.bookDto ? JSON.stringify(params.bookDto) : undefined,
                headers: {
                    ...this.removeEmpty(params?.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
}

/**
 * CoverPhotosApi - object-oriented interface
 */
export interface CoverPhotosApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1CoverPhotosBooksCoversIdBookGet(params: {
        pathParams: { idBook: number };
    } & RequestCallOptions): Promise<Array<CoverPhotoDto>>;
    /**
     *
     * @throws {HttpError}
     */
    apiV1CoverPhotosGet(params?: RequestCallOptions): Promise<Array<CoverPhotoDto>>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1CoverPhotosIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1CoverPhotosIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<CoverPhotoDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1CoverPhotosIdPut(params: {
        pathParams: { id: number };
        coverPhotoDto?: CoverPhotoDto;
    } & RequestCallOptions): Promise<CoverPhotoDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1CoverPhotosPost(params?: {
        coverPhotoDto?: CoverPhotoDto;
    } & RequestCallOptions): Promise<CoverPhotoDto>;
}

/**
 * CoverPhotosApi - object-oriented interface
 */
export class CoverPhotosApi extends BaseAPI implements CoverPhotosApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosBooksCoversIdBookGet(params: {
        pathParams: { idBook: number };
    } & RequestCallOptions): Promise<Array<CoverPhotoDto>> {
        return await this.fetch(
            this.url("/api/v1/CoverPhotos/books/covers/{idBook}", params.pathParams), params
        );
    }
    /**
     *
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosGet(params: RequestCallOptions = {}): Promise<Array<CoverPhotoDto>> {
        return await this.fetch(
            this.basePath + "/api/v1/CoverPhotos", params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/CoverPhotos/{id}", params.pathParams),
            {
                ...params,
                method: "DELETE",
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<CoverPhotoDto> {
        return await this.fetch(
            this.url("/api/v1/CoverPhotos/{id}", params.pathParams), params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosIdPut(params: {
        pathParams: { id: number };
        coverPhotoDto?: CoverPhotoDto;
    } & RequestCallOptions): Promise<CoverPhotoDto> {
        return await this.fetch(
            this.url("/api/v1/CoverPhotos/{id}", params.pathParams),
            {
                ...params,
                method: "PUT",
                body: JSON.stringify(params.coverPhotoDto),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1CoverPhotosPost(params?: {
        coverPhotoDto?: CoverPhotoDto;
    } & RequestCallOptions): Promise<CoverPhotoDto> {
        return await this.fetch(
            this.basePath + "/api/v1/CoverPhotos",
            {
                ...params,
                method: "POST",
                body: params?.coverPhotoDto ? JSON.stringify(params.coverPhotoDto) : undefined,
                headers: {
                    ...this.removeEmpty(params?.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
}

/**
 * UsersApi - object-oriented interface
 */
export interface UsersApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    apiV1UsersGet(params?: RequestCallOptions): Promise<Array<UserDto>>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1UsersIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1UsersIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1UsersIdPut(params: {
        pathParams: { id: number };
        userDto?: UserDto;
    } & RequestCallOptions): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    apiV1UsersPost(params?: {
        userDto?: UserDto;
    } & RequestCallOptions): Promise<void>;
}

/**
 * UsersApi - object-oriented interface
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     *
     * @throws {HttpError}
     */
    public async apiV1UsersGet(params: RequestCallOptions = {}): Promise<Array<UserDto>> {
        return await this.fetch(
            this.basePath + "/api/v1/Users", params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1UsersIdDelete(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Users/{id}", params.pathParams),
            {
                ...params,
                method: "DELETE",
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1UsersIdGet(params: {
        pathParams: { id: number };
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Users/{id}", params.pathParams), params
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1UsersIdPut(params: {
        pathParams: { id: number };
        userDto?: UserDto;
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.url("/api/v1/Users/{id}", params.pathParams),
            {
                ...params,
                method: "PUT",
                body: JSON.stringify(params.userDto),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async apiV1UsersPost(params?: {
        userDto?: UserDto;
    } & RequestCallOptions): Promise<void> {
        return await this.fetch(
            this.basePath + "/api/v1/Users",
            {
                ...params,
                method: "POST",
                body: params?.userDto ? JSON.stringify(params.userDto) : undefined,
                headers: {
                    ...this.removeEmpty(params?.headers),
                    "Content-Type": "application/json; v=1.0",
                },
            }
        );
    }
}

type ServerNames =
    | "default";

export const servers: Record<ServerNames, ApplicationApis> = {
    default: {
        activitiesApi: new ActivitiesApi(""),
        authorsApi: new AuthorsApi(""),
        booksApi: new BooksApi(""),
        coverPhotosApi: new CoverPhotosApi(""),
        usersApi: new UsersApi(""),
    },
};

