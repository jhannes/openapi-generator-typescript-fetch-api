/**
 * Conversations
 * Conversations for real time and offline peer-to-peer web chat
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface AddMessageToConversationDeltaDto {
    delta: "AddMessageToConversationDelta";
    conversationId: string;
    messageId: string;
    message: ConversationMessageDto;
}

export interface ChangeTrackedDto {
    createdAt: Date;
    updatedAt: Date;
}

export interface CommandToServerDto {
    id: string;
    clientTime: Date;
    delta: DeltaDto;
}

export interface ConversationInfoDto {
    title: string;
    summary?: string;
}

export interface ConversationMessageDto {
    text: string;
}

export type ConversationMessageSnapshotDto = ChangeTrackedDto & ConversationMessageDto;

export interface ConversationSnapshotDto extends ChangeTrackedDto {
    id: string;
    info: ConversationInfoDto;
    messages: { [key: string]: ConversationMessageSnapshotDto; };
}

export interface CreateConversationDeltaDto {
    delta: "CreateConversationDelta";
    conversationId: string;
    info: ConversationInfoDto;
}

export type DeltaDto =
    { delta: "AddMessageToConversationDelta" } & AddMessageToConversationDeltaDto |
    UpdateConversationDeltaDto |
    { delta: "CreateConversationDelta" } & CreateConversationDeltaDto;

export const DeltaDtoDescriminators = [
    "AddMessageToConversationDelta",
    "UpdateConversationSummaryDelta",
    "UpdateConversationTitleDelta",
    "CreateConversationDelta",
] as const;

export type DeltaDtoDescriminator = typeof DeltaDtoDescriminators[number];

export interface EventFromServerDto extends CommandToServerDto {
    serverTime: Date;
    username: string;
}

export type MessageFromServerDto = SnapshotSetDto | EventFromServerDto;

export type MessageToServerDto = CommandToServerDto | RequestToServerDto;

export type RequestToServerDto =
    { request: "SubscribeRequest" } & SubscribeRequestDto;

export const RequestToServerDtoDescriminators = [
    "SubscribeRequest",
] as const;

export type RequestToServerDtoDescriminator = typeof RequestToServerDtoDescriminators[number];

export interface SnapshotSetDto {
    conversations: Array<ConversationSnapshotDto>;
}

export interface SubscribeRequestDto {
    request: "SubscribeRequest";
    clientId: string;
}

export type UpdateConversationDeltaDto =
    { delta: "UpdateConversationTitleDelta" } & UpdateConversationTitleDeltaDto |
    { delta: "UpdateConversationSummaryDelta" } & UpdateConversationSummaryDeltaDto;

export const UpdateConversationDeltaDtoDescriminators = [
    "UpdateConversationTitleDelta",
    "UpdateConversationSummaryDelta",
] as const;

export type UpdateConversationDeltaDtoDescriminator = typeof UpdateConversationDeltaDtoDescriminators[number];

export interface UpdateConversationSummaryDeltaDto {
    delta: "UpdateConversationSummaryDelta";
    conversationId: string;
    summary: string;
}

export interface UpdateConversationTitleDeltaDto {
    delta: "UpdateConversationTitleDelta";
    conversationId: string;
    title: string;
}
